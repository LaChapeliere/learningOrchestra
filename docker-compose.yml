version: '3'

services:
    frontend:
        build: ./frontend_service
        image: 127.0.0.1:5050/frontend:frontend
        ports:
            - "80:8000"
        depends_on:
            - database_api
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints:
                    - "node.role==worker"
        networks:
            - frontend
        environment:
            - DATABASE_API_HOST=http://database_api
            - DATABASE_API_PORT=5000
        tty: true

    database_api:
        build: ./database_api_service
        image: 127.0.0.1:5050/database_api:database_api
        ports:
            - "5000:5000"
        depends_on:
            - database_primary
            - images
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints:
                    - "node.role==worker"
        volumes:
            - 'database_api:/database_api'
        networks:
            - database
            - frontend
        environment:
            - DATABASE_URL=mongodb://root:owl45#21@database_primary,database_secondary/?replicaSet=replica_set
            - DATABASE_PORT=27017 

    database_primary:
        image: 'bitnami/mongodb:3.6.17-ol-7-r26'
        environment:
            - MONGODB_ADVERTISED_HOSTNAME=database_primary
            - MONGODB_REPLICA_SET_MODE=primary
            - MONGODB_REPLICA_SET_KEY=replicasetkey
            - MONGODB_ROOT_PASSWORD=owl45#21
            - MONGODB_REPLICA_SET_NAME=replica_set    
        volumes:
            - 'database:/bitnami'
        networks:
            - database
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints:
                    - "node.role==manager"

    database_secondary:
        image: 'bitnami/mongodb:3.6.17-ol-7-r26'
        depends_on:
            - database_primary
        environment:
            - MONGODB_ADVERTISED_HOSTNAME=database_secondary
            - MONGODB_REPLICA_SET_MODE=secondary
            - MONGODB_PRIMARY_HOST=database_primary
            - MONGODB_PRIMARY_PORT_NUMBER=27017
            - MONGODB_REPLICA_SET_KEY=replicasetkey
            - MONGODB_PRIMARY_ROOT_PASSWORD=owl45#21
            - MONGODB_REPLICA_SET_NAME=replica_set
        networks:
            - database
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints:
                    - "node.role==worker"

    database_arbiter:
        image: 'bitnami/mongodb:3.6.17-ol-7-r26'
        depends_on:
         - database_primary
        environment:
            - MONGODB_ADVERTISED_HOSTNAME=database_arbiter
            - MONGODB_REPLICA_SET_MODE=arbiter
            - MONGODB_PRIMARY_HOST=database_primary
            - MONGODB_PRIMARY_PORT_NUMBER=27017
            - MONGODB_REPLICA_SET_KEY=replicasetkey
            - MONGODB_PRIMARY_ROOT_PASSWORD=owl45#21
            - MONGODB_REPLICA_SET_NAME=replica_set
        networks:
            - database
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints:
                    - "node.role==worker"

    images:
        image: registry:2.7.1
        ports:
            - "5050:5000"
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints:
                    - "node.role==manager"
        networks:
            - database
        volumes:
            - images:/var/lib/registry

    visualizer:
        image: dockersamples/visualizer:latest
        volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"
        ports:
        - "8000:8080"
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints:
                    - "node.role==manager"

    sparkmaster:
        build: ./spark_service
        image: spark:2.4.5
        ports:
            - 4040:4040
            - 7077:7077
            - 8080:8080
        environment:
            - SPARK_ROLE=master
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints:
                    - "node.role==worker"
        networks:
            - spark
            - database

    sparkworker:
        image: spark:2.4.5
        entrypoint: dockerize -wait tcp://sparkmaster:7077 -timeout 240s /sbin/my_init
        ports:
            - 8081:8081
            - 41352:41352
        links:
            - sparkmaster
        environment:
            - SPARK_MASTER=sparkmaster
            - SPARK_ROLE=slave
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints:
                    - "node.role==worker"
        networks:
            - spark
            - database

    projection:
        build: ./projection_service
        image: projection:projection
        ports:
            - "5001:5001"
            - 41000:41000
        extra_hosts:
            - "projection:0.0.0.0"
        depends_on:
            - database_primary
            - images
            - sparkmaster
            - sparkworker
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints:
                    - "node.role==worker"
        networks:
            - database
            - frontend
            - spark
        environment:
            - DATABASE_URL=mongodb://root:owl45#21@database_primary,database_secondary
            - DATABASE_PORT=27017
            - DATABASE_REPLICA_SET=replica_set
            - DATABASE_NAME=database

networks:
    database:
    frontend:
    spark:

volumes:
    images:
    database:
    database_api: